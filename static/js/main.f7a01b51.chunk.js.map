{"version":3,"sources":["markdown-pages/post.md","serviceWorker.ts","utils/switchAction.js","actions/actionTypes.jsx","reducers/index.tsx","markdown-pages/markdown_handler.jsx","actions/actions.tsx","sagas/index.tsx","store/index.jsx","components/Myblog.tsx","index.tsx","hooks/myBlog.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","actionToReducerMap","ACTION_TYPES","TEST","FETCH_MARKDOWN_PAGES","SET_MARKDOWN_PAGES","initState","markDownPages","actionSwitch","state","payload","console","log","action","reducer","type","Myblog","loadMd","path","require","fetch","then","res","text","result","marked","mds","fetchMarkdownPages","setMarkdownPages","root","call","put","takeEvery","logger","createLogger","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","run","sagas","Content","Footer","Sider","Header","ReactDOM","render","Provider","value","useMappedState","s","dispatch","useDispatch","actionCreators","bindActionCreators","useEffect","useMyBlog","useState","show","setShow","locale","zhTW","style","minHeight","theme","className","mode","Item","key","onClick","margin","background","padding","dangerouslySetInnerHTML","__html","textAlign","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7a01b51.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/post.eaf641fe.md\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default (actionToReducerMap) => {\r\n  return function switchAction (state, action = {}) {\r\n    const reducer = actionToReducerMap[action.type]\r\n\r\n    return reducer\r\n      ? reducer(state, action)\r\n      : state\r\n  }\r\n}","const ACTION_TYPES = {\r\n  TEST: 'TEST',\r\n  FETCH_MARKDOWN_PAGES: 'FETCH_MARKDOWN_PAGES',\r\n  SET_MARKDOWN_PAGES: 'SET_MARKDOWN_PAGES'\r\n}\r\n\r\n// export const SET_MARKDOWN_PAGES = 'SET_MARKDOWN_PAGES'\r\n\r\nexport default ACTION_TYPES","import { Reducer } from 'redux';\r\nimport createSwitch from '../utils/switchAction'\r\nimport ACTION_TYPES from '../actions/actionTypes'\r\nimport * as actions from '../actions/actions'\r\n\r\nexport interface MyBlogState {\r\n  markDownPages: any\r\n}\r\n\r\nconst initState: MyBlogState = {\r\n  markDownPages: ''\r\n}\r\n\r\nconst setMarkdownPages = (state: MyBlogState, { payload }: actions.SetMarkdownPagesAction): MyBlogState => {\r\n  const { markDownPages } = payload\r\n  console.log('SET_MARKDOWN_PAGES HAD BEEN CALLED !!!')\r\n  return {\r\n    ...state,\r\n    markDownPages: markDownPages\r\n  }\r\n}\r\n\r\nconst actionSwitch = createSwitch({\r\n  [ACTION_TYPES.SET_MARKDOWN_PAGES]: setMarkdownPages\r\n})\r\n\r\nconst Myblog: Reducer<MyBlogState> = (state: MyBlogState = initState, action): MyBlogState => actionSwitch(state, action)\r\n\r\nexport default Myblog\r\n","import marked from 'marked'\r\nconst path = require('./post.md')\r\n\r\nexport function* loadMd() {\r\n  try {\r\n    const result = yield window.fetch(path).then(res => res.text())\r\n    const mds = yield marked(result)\r\n    return mds\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}","import ACTION_TYPES from './actionTypes'\r\nimport { Action } from 'redux'\r\n\r\n/**\r\n * 讀取md檔案\r\n */\r\nexport function fetchMarkdownPages(): Action<string> {\r\n  return {\r\n    type: ACTION_TYPES.FETCH_MARKDOWN_PAGES\r\n  }\r\n}\r\n\r\nexport interface SetMarkdownPagesAction extends Action<string> {\r\n  payload: {\r\n    markDownPages: any\r\n  }\r\n}\r\n\r\n/**\r\n * 設定md資料\r\n * @param {object} markDownPages .md\r\n */\r\nexport function setMarkdownPages(markDownPages: any): SetMarkdownPagesAction {\r\n  return {\r\n    type: ACTION_TYPES.SET_MARKDOWN_PAGES,\r\n    payload: { markDownPages }\r\n  }\r\n}\r\n","import { SagaIterator } from 'redux-saga-ie8'\r\nimport { put, call } from 'redux-saga-ie8/effects'\r\nimport { loadMd } from '../markdown-pages/markdown_handler'\r\nimport ACTION_TYPES from '../actions/actionTypes'\r\nimport { setMarkdownPages } from '../actions/actions'\r\nimport { takeEvery } from 'redux-saga-ie8'\r\n\r\nfunction* fetchMarkdownPages(): SagaIterator {\r\n  try {\r\n    const mds = yield call(loadMd)\r\n    yield put(setMarkdownPages(mds))\r\n  } catch(e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nexport default function * root() {\r\n  yield [\r\n    takeEvery(ACTION_TYPES.FETCH_MARKDOWN_PAGES, fetchMarkdownPages)\r\n  ]\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport reducers from '../reducers'\r\nimport { createLogger } from 'redux-logger'\r\nimport createSagaMiddleware from 'redux-saga-ie8'\r\nimport sagas from '../sagas'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst logger = createLogger()\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeWithDevTools(\r\n    applyMiddleware(logger),\r\n    applyMiddleware(sagaMiddleware)\r\n  )\r\n)\r\n\r\nsagaMiddleware.run(sagas)\r\n\r\nexport default store","import React, { ReactElement, useState } from 'react'\r\nimport { Layout, Breadcrumb, Menu, Icon, Affix, ConfigProvider } from 'antd';\r\nimport { useMyBlog } from '../hooks/myBlog'\r\nimport './style/myBlog.css'\r\nimport zhTW from 'antd/es/locale/zh_TW';\r\nimport QueueAnim from 'rc-queue-anim';\r\n\r\nconst { Content, Footer, Sider, Header } = Layout;\r\n\r\nexport default function Myblog(): ReactElement {\r\n  const { markDownPages } = useMyBlog()\r\n  const [show, setShow] = useState(true)\r\n  return (\r\n    <>\r\n      <ConfigProvider locale={zhTW}>\r\n        <Layout style={{ minHeight: '100vh' }}>\r\n          <Sider theme='dark'>\r\n            <div className=\"logo\" />\r\n            <Affix>\r\n              <Menu theme='dark' mode=\"inline\">\r\n                <Menu.Item key=\"1\">\r\n                  <Icon type=\"pie-chart\" />\r\n                  <span>虛假的按鈕 1</span>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" onClick={() => setShow(!show)}>\r\n                  <Icon type=\"desktop\" />\r\n                  <span>虛假的按鈕 2</span>\r\n                </Menu.Item>\r\n              </Menu>\r\n            </Affix>\r\n          </Sider>\r\n          <Layout>\r\n            <Breadcrumb style={{ margin: '16px' }}>\r\n              <Breadcrumb.Item>User</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Bill</Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <QueueAnim className=\"demo-content\">\r\n              {show ? [\r\n                <Content className=\"demo-thead\" key=\"a\" style={{ margin: '0 16px', background: '#fff' }}>\r\n                  <div style={{ padding: 24, minHeight: 360 }}>\r\n                    <article dangerouslySetInnerHTML={{ __html: markDownPages }} />\r\n                  </div>\r\n                </Content>\r\n              ] : null}\r\n            </QueueAnim>\r\n            <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\r\n          </Layout>\r\n        </Layout>\r\n      </ConfigProvider>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { StoreContext } from 'redux-react-hook'\nimport store from '../src/store'\nimport MyBlog from './components/Myblog'\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <MyBlog />\n  </StoreContext.Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { useEffect } from 'react'\r\nimport { useDispatch, useMappedState } from 'redux-react-hook'\r\nimport { setMarkdownPages, fetchMarkdownPages } from '../actions/actions'\r\nimport { bindActionCreators } from 'redux'\r\n// import _ from 'lodash'\r\n\r\nexport function useMyBlog(): {\r\n  markDownPages: any\r\n  setMarkdownPages: (markDownPages: any) => void\r\n  fetchMarkdownPages: () => void\r\n} {\r\n  const state = useMappedState(s => s)\r\n  const dispatch = useDispatch()\r\n  const markDownPages = state.markDownPages\r\n\r\n  const actionCreators = bindActionCreators(\r\n    { setMarkdownPages, fetchMarkdownPages },\r\n    dispatch\r\n  )\r\n\r\n  useEffect(() => { actionCreators.fetchMarkdownPages() }, [])\r\n\r\n  return {\r\n    markDownPages,\r\n    ...actionCreators\r\n  }\r\n}"],"sourceRoot":""}